'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.skills = exports.skillsXDAI = exports.skillsETH2 = exports.skillGasFee = exports.skillBeaconLastBlock = exports.skillEth2Stats = exports.calcAPR = exports.calcWaitTime = exports.skillLastXdaiBlock = exports.skillLastBlock = exports.rpcTokenBalance = exports.rpcEthBalance = void 0;

var _react = _interopRequireWildcard(require("react"));

var _ink = require("ink");

var _asciiBar = _interopRequireDefault(require("ascii-bar"));

var _humanizeDuration = _interopRequireDefault(require("humanize-duration"));

var _commaNumber = _interopRequireDefault(require("comma-number"));

var _i18n = require("saihubot-cli-adapter/dist/i18n");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const ADDR = {
  ETH2_DEPOSIT: '0x00000000219ab540356cbb839cbe05303d7705fa'
};
let idx = 1; // https://eth.wiki/json-rpc/API

const rpcLastBlock = JSON.stringify({
  jsonrpc: '2.0',
  id: idx++,
  method: 'eth_blockNumber',
  params: []
});

const rpcEthBalance = address => JSON.stringify({
  jsonrpc: '2.0',
  id: idx++,
  method: 'eth_getBalance',
  params: [`${address}`, "latest"]
});

exports.rpcEthBalance = rpcEthBalance;

const rpcTokenBalance = (address, token) => JSON.stringify({
  jsonrpc: '2.0',
  id: idx++,
  method: 'eth_call',
  params: [{
    to: token,
    data: `0x70a08231${address.replace('0x', '').padStart(64, '0')}`
  }, 'latest']
});

exports.rpcTokenBalance = rpcTokenBalance;

const rpcGasPrice = () => JSON.stringify({
  jsonrpc: '2.0',
  id: idx++,
  method: 'eth_gasPrice',
  params: []
});
/**
 * Get the latest block number.
 */


const skillLastBlock = {
  name: 'lastblock',
  help: 'lastblock|block - get the latest Eth1 block number',
  requirements: {
    addons: ['fetch']
  },
  i18n: {
    'en': {
      fetching: 'Fetching data...',
      summary: 'The latest block is **{{blocknum}}**'
    },
    'zh_TW': {
      fetching: 'ÂèñÂæóË≥áÊñô‰∏≠...',
      summary: 'ÊúÄÊñ∞ÁöÑÂçÄÂ°äÊòØ **{{blocknum}}**'
    },
    props: ['blocknum']
  },
  rule: /^(last)?block$/i,
  action: function (robot, msg) {
    robot.send((0, _i18n.t)('fetching', {
      i18n: this.i18n
    }));
    robot.render();
    (0, _utils.ethFetch)(robot.addons.fetch, rpcLastBlock).then(json => {
      const msg = (0, _i18n.t)('summary', {
        i18n: this.i18n,
        blocknum: parseInt(json.result)
      });
      robot.send(msg);
      robot.render();
    });
  }
};
/**
 * Get the latest block number.
 */

exports.skillLastBlock = skillLastBlock;
const skillLastXdaiBlock = {
  name: 'lastblock-xdai',
  help: 'lastblock-xdai|lastblockxdai|block-xdai|blockxdai - get the latest xDai block number',
  requirements: {
    addons: ['fetch']
  },
  i18n: {
    'en': {
      fetching: 'Fetching data...',
      summary: 'The latest xDai block is **{{blocknum}}**'
    },
    'zh_TW': {
      fetching: 'ÂèñÂæóË≥áÊñô‰∏≠...',
      summary: 'ÊúÄÊñ∞ÁöÑxDaiÂçÄÂ°äÊòØ **{{blocknum}}**'
    },
    props: ['blocknum']
  },
  rule: /^(last)?block-?xdai$/i,
  action: function (robot, msg) {
    robot.send((0, _i18n.t)('fetching', {
      i18n: this.i18n
    }));
    robot.render();
    (0, _utils.xdaiFetch)(robot.addons.fetch, rpcLastBlock).then(json => {
      const msg = (0, _i18n.t)('summary', {
        i18n: this.i18n,
        blocknum: parseInt(json.result)
      });
      robot.send(msg);
      robot.render();
    });
  }
};
exports.skillLastXdaiBlock = skillLastXdaiBlock;
const statsI18n = {
  "en": {
    fetching: 'Fetching data...',
    summary: `{{balance}} ETH has been deposited for {{validators}} validators`,
    statistics: `ü§ë Reward Rate: {{apr}}%
üåæ Participation rate: {{participationRate}}%
üíÉ Active Validator: {{activeValidator}}
üì¶ Latest Epoch: {{epoch}}

üë¨ Queued Validator: {{queueValidator}}
‚è≥ Wait time: {{waitTime}}
`
  },
  "zh_TW": {
    fetching: 'ÂèñÂæóË≥áÊñô‰∏≠...',
    summary: `Â∑≤Â≠òÂÖ• {{balance}} ETH, ÊîØÊåÅ {{validators}} ‰ΩçÈ©óË≠âËÄÖ`,
    statistics: `ü§ë È†ê‰º∞Êî∂ÁõäÁéá: {{apr}}%
üåæ ÂèÉËàáÂ∫¶: {{participationRate}}%
üíÉ Ê¥ªË∫çÈ©óË≠âËÄÖ: {{activeValidator}}
üì¶ ÊúÄËøëÁöÑ Epoch: {{epoch}}

üë¨ ÊéíÈöä‰∏≠ÁöÑÈ©óË≠âËÄÖ: {{queueValidator}}
‚è≥ È†ê‰º∞Á≠âÂæÖÊôÇÈñì: {{waitTime}}
`
  },
  props: ['apr', 'balance', 'validators', 'activeValidator', 'participationRate', 'epoch', 'queueValidator', 'waitTime']
}; // https://github.com/TheRyanMiller/Eth2RewardsCalc/blob/master/getBeaconData.js

const calcWaitTime = (queueLength, activeValidator) => {
  //225 Epochs per day (1 epoch = 32 * 12s slots)
  //900 validators can be activated per day (4 per epoch)
  // https://www.reddit.com/r/ethstaker/comments/k9wf4x/estimated_timeline_of_apr_and_eth_staked/gf7m0rf/
  const daylyValidators = 225 * Math.max(Math.floor(activeValidator / 6500), 4); // need wait at least every 96 seconds per validator

  const perWaitTime = Math.floor(24 * 60 * 60 / daylyValidators);
  let time = 0;
  if (queueLength > 0) time = perWaitTime * queueLength;
  return (0, _humanizeDuration.default)(time * 1000, {
    round: true,
    units: ["d", "h"]
  });
}; // https://www.reddit.com/r/ethstaker/comments/k7e9k0/what_will_be_the_minimum_apr_rate_for_eth2_stake/gexwpzq/


exports.calcWaitTime = calcWaitTime;

const calcAPR = validatorscount => (14300 / Math.sqrt(validatorscount)).toFixed(2);

exports.calcAPR = calcAPR;

const ProgressBar = ({
  fetch,
  ethFetch
}) => {
  const [beaconData, setBeaconData] = (0, _react.useState)({});
  const [balance, setBalance] = (0, _react.useState)(0);
  (0, _react.useEffect)(() => {
    async function fetchBalance() {
      ethFetch(fetch, rpcEthBalance(ADDR.ETH2_DEPOSIT)).then(json => setBalance(Math.floor(json.result / 10 ** 18)));
    }

    fetchBalance();
  }, [ethFetch, fetch]);
  (0, _react.useEffect)(() => {
    async function fetchLatest() {
      fetch('https://beaconcha.in/api/v1/epoch/latest').then(response => response.json()).then(json => setBeaconData(json.data));
    }

    fetchLatest();
  }, [fetch]);
  const percent = balance / 524288;
  const validators = Math.floor(balance / 32);
  const message = `${parseFloat(percent * 100).toFixed(2)}%`;
  const barSize = 20;
  const bar = new _asciiBar.default({
    formatString: '#bar #message',
    undoneSymbol: "‚ñë",
    doneSymbol: "‚ñì",
    width: barSize,
    total: barSize,
    start: Math.min(Math.round(percent * barSize), barSize),
    enableSpinner: false,
    lastUpdateForTiming: false,
    message
  });
  const title = (0, _i18n.t)('summary', {
    i18n: statsI18n,
    balance: (0, _commaNumber.default)(balance),
    validators: balance && (0, _commaNumber.default)(validators)
  }); // more accurate: active - exit

  const queueValidator = beaconData && validators - beaconData.validatorscount;
  const stats = (0, _i18n.t)('statistics', {
    i18n: statsI18n,
    validators: balance && (0, _commaNumber.default)(validators),
    activeValidator: beaconData && (0, _commaNumber.default)(beaconData.validatorscount),
    participationRate: beaconData && Number(beaconData.globalparticipationrate * 100).toFixed(2),
    epoch: beaconData && beaconData.epoch,
    queueValidator: (0, _commaNumber.default)(queueValidator),
    waitTime: beaconData && calcWaitTime(queueValidator, beaconData.validatorscount),
    apr: beaconData && calcAPR(beaconData.totalvalidatorbalance / 10 ** 9)
  });
  return balance ? /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_ink.Text, null, stats), /*#__PURE__*/_react.default.createElement(_ink.Text, null, title), /*#__PURE__*/_react.default.createElement(_ink.Text, null, bar.renderLine())) : /*#__PURE__*/_react.default.createElement(_ink.Text, null, (0, _i18n.t)('fetching', {
    i18n: statsI18n
  }));
};
/**
 * Get Eth2 stake state.
 *
 * üåæ Participation rate: 99.08%
 * üíÉ Active Validator: 25,467
 * üì¶ Latest Epoch: 1148
 * üë¨ Queued Validator: 10,054
 * ‚è≥ Wait time: 11 days, 4 hours
 *
 * 1,136,688 ETH has been deposited for 35,521 validators
 * [‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì] 216.81%
 */


const skillEth2Stats = {
  name: 'stakestat',
  help: 'üóû stats - latest Eth2 stake state',
  requirements: {
    addons: ['fetch']
  },
  rule: /^stats/i,
  action: function (robot, msg) {
    robot.sendComponent( /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(ProgressBar, {
      fetch: robot.addons.fetch,
      ethFetch: _utils.ethFetch
    })));
    robot.render();
  }
};
/**
 * Get the latest Eth2 block number.
 */

exports.skillEth2Stats = skillEth2Stats;
const skillBeaconLastBlock = {
  name: 'lastBlockBeacon',
  help: 'lastblock-eth2|lastblock-beacon|block-eth2|block-beacon - get the latest Eth2 block number',
  requirements: {
    addons: ['fetch']
  },
  i18n: {
    'en': {
      fetching: 'Fetching data...',
      summary: 'The latest BeaconChain Epoch **#{{epoch}}** Slot **#{{slot}}** (proposed by **#{{proposer}}**)'
    },
    'zh_TW': {
      fetching: 'ÂèñÂæóË≥áÊñô‰∏≠...',
      summary: 'ÊúÄÊñ∞ÁöÑ BeaconChain Epoch **#{{epoch}}**Slot **#{{slot}}** (Âá∫Â°äËÄÖ **#{{proposer}}**)'
    },
    props: ['epoch', 'proposer', 'slot']
  },
  rule: /^(last)?block-(beacon|eth2)$/i,
  action: function (robot, msg) {
    robot.send((0, _i18n.t)('fetching', {
      i18n: this.i18n
    }));
    robot.render();
    robot.addons.fetch('https://beaconcha.in/api/v1/block/latest').then(response => response.json()).then(json => {
      const data = json.data;
      const msg = (0, _i18n.t)('summary', {
        i18n: this.i18n,
        epoch: data.epoch,
        slot: data.slot,
        proposer: data.proposer
      });
      robot.send(msg);
      robot.render();
    });
  }
};
/**
 * Show current ethereum Gas fee from the chain.
 */

exports.skillBeaconLastBlock = skillBeaconLastBlock;
const skillGasFee = {
  name: 'gasfee',
  help: 'üõ¢ gasfee - Show current on-chain gas fee',
  requirements: {
    addons: ['fetch']
  },
  i18n: {
    'en': {
      fetching: 'Fetching gas...',
      fee: 'Current on-chain gas fee is {{gas}} gwei'
    },
    'zh_TW': {
      fetching: 'ÂèñÂæó gas Ë≤ªÁî®...',
      fee: 'Áï∂ÂâçÈèà‰∏äÁöÑ Gas Ë≤ªÁî®ÁÇ∫ {{gas}} gwei'
    },
    props: ['gas']
  },
  rule: /^gasfee/i,
  action: function (robot, msg) {
    robot.send((0, _i18n.t)('fetching', {
      i18n: this.i18n
    }));
    robot.render();
    (0, _utils.ethFetch)(robot.addons.fetch, rpcGasPrice()).then(json => {
      const gas = Number(json.result) / 10 ** 9;
      const msg = (0, _i18n.t)('fee', {
        i18n: this.i18n,
        gas
      });
      robot.send(msg);
      robot.render();
    });
  }
};
exports.skillGasFee = skillGasFee;
const skillsETH2 = [skillEth2Stats, skillLastBlock, skillBeaconLastBlock];
exports.skillsETH2 = skillsETH2;
const skillsXDAI = [skillLastXdaiBlock];
exports.skillsXDAI = skillsXDAI;
const skills = [...skillsETH2, ...skillsXDAI, skillGasFee];
exports.skills = skills;