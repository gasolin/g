"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.xdaiFetch = exports.ethFetch = exports.getXdaiNodeURL = exports.getNodeURL = exports.getRandomItem = exports.getConfig = void 0;

/**
 * get SAIHUBOT_[env] environment variable and
 * return as string or array.
 */
const getConfig = (env, defaultValue) => {
  const param = process && process.env[`SAIHUBOT_${env}`];
  const data = param && param.indexOf(',') > 0 ? param.split(',').map(item => item.trim()) : param;
  return data ? data : defaultValue;
};
/** get random item from an array. */


exports.getConfig = getConfig;

const getRandomItem = arr => arr[Math.floor(Math.random() * arr.length)]; // free nodes without API keys from https://ethereumnodes.com/


exports.getRandomItem = getRandomItem;
const ETH_NODES = ['https://api.mycryptoapi.com/eth', // MyCrypto
'https://web3.1inch.exchange/', // 1inch
'https://cloudflare-eth.com/', // Cloudflare
'https://mainnet-nethermind.blockscout.com/', // Blockscout
'https://nodes.mewapi.io/rpc/eth', // MyEtherWallet
'https://mainnet.eth.cloud.ava.do/' // AVADO
]; // https://www.xdaichain.com/for-developers/developer-resources#json-rpc-endpoints

const XDAI_NODES = ['https://rpc.xdaichain.com/', 'https://xdai.poanetwork.dev/'];
let cachedNodeURL = '';
/**
 * Random pick a ethereum node.
 *
 * can set yours via set SAIHUBOT_NODE_URL environment variable.
 */

const getNodeURL = () => {
  if (cachedNodeURL) return cachedNodeURL;
  cachedNodeURL = getConfig('NODE_URL', getRandomItem(ETH_NODES));
  return cachedNodeURL;
};

exports.getNodeURL = getNodeURL;
let cachedXdaiNodeUrl = '';
/**
 * Random pick a xdai node.
 *
 * can set yours via set SAIHUBOT_XDAI_NODE_URL environment variable.
 */

const getXdaiNodeURL = () => {
  if (cachedXdaiNodeUrl) return cachedXdaiNodeUrl;
  cachedXdaiNodeUrl = getConfig('XDAI_NODE_URL', getRandomItem(XDAI_NODES));
  return cachedXdaiNodeUrl;
};

exports.getXdaiNodeURL = getXdaiNodeURL;
const baseFetchOptions = {
  method: "POST",
  headers: {
    "Content-Type": "application/json"
  }
};

const ethFetch = (fetch, body) => fetch(getNodeURL(), { ...baseFetchOptions,
  body
}).then(response => response.json());

exports.ethFetch = ethFetch;

const xdaiFetch = (fetch, body) => fetch(getXdaiNodeURL(), { ...baseFetchOptions,
  body
}).then(response => response.json());

exports.xdaiFetch = xdaiFetch;