'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _ink = require("ink");

var _inkMarkdown = _interopRequireDefault(require("ink-markdown"));

var _chalk = _interopRequireDefault(require("chalk"));

var _dedent = _interopRequireDefault(require("dedent"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultRenderMessage = (msg, charactor, role) => /*#__PURE__*/_react.default.createElement(_inkMarkdown.default, {
  link: _chalk.default.cyan,
  href: _chalk.default.cyan.underline
}, (0, _dedent.default)(msg));

const defaultRenderComponent = (element, charactor, role) => element; // Commandline adapter based on https://github.com/vadimdemedes/ink


const cliAdapter = cli => ({
  // essential functions
  name: 'cli',
  description: 'Command Line',
  run: function (robot) {
    this.robot = robot;
    this.ui = robot.ui;
    this.customMsgParse = '';
  },
  shutdownHook: function (shutdown) {
    this.DEBUG && console.log('shut down');
  },
  close: function () {
    console.log('close basic adapter');
  },
  // send text message
  send: function (msg, role) {
    const {
      botAlias,
      userAlias,
      chatHistory,
      renderMessage
    } = this.robot;
    this.DEBUG && console.log('send ', msg);
    const charactor = role === 'bot' ? botAlias : userAlias;
    const messageElement = typeof renderMessage === 'function' ? renderMessage(msg, charactor, role) : defaultRenderMessage(msg, charactor, role);
    chatHistory.push(messageElement);
  },
  sendComponent: function (element, role = 'bot') {
    const {
      botAlias,
      userAlias,
      chatHistory,
      renderComponent
    } = this.robot;
    const charactor = role === 'bot' ? botAlias : userAlias;
    const messageElement = typeof renderComponent === 'function' ? renderComponent(element, charactor, role) : defaultRenderComponent(element, charactor, role);
    chatHistory.push(messageElement);
  },
  render: function () {
    const {
      chatHistory
    } = this.robot;
    this.DEBUG && console.log('render');

    if (chatHistory.length > 0) {
      (0, _ink.render)(chatHistory[chatHistory.length - 1]);
    }
  }
});

var _default = cliAdapter;
exports.default = _default;