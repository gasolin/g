/// <reference types="node" />
declare type BlockTag = string | number;
interface TransactionRequest {
    to: string;
    data: string;
}
export interface EthersProviderLike {
    call(transaction: TransactionRequest, blockTag?: BlockTag | Promise<BlockTag>): Promise<string>;
}
/**
 * Check if an object is a valid EthersProviderLike object.
 *
 * @param {any} provider
 * @return {boolean}
 */
export declare const isEthersProvider: (provider: unknown) => provider is EthersProviderLike;
/**
 * Call the contract with an Ethers provider. This throws an error if the call failed.
 *
 * @param {EthersProviderLike} provider
 * @param {string} contractAddress
 * @param {string} data
 * @return {Promise<Buffer>}
 */
export declare const callWithEthers: (provider: EthersProviderLike, contractAddress: string, data: string) => Promise<Buffer>;
export {};
//# sourceMappingURL=ethers.d.ts.map