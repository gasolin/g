/// <reference types="node" />
interface HttpProviderWithOptions {
    url: string;
    params?: Partial<Omit<RequestInit, 'body' | 'method'>>;
}
export declare type HttpProviderLike = string | HttpProviderWithOptions;
export interface JsonRpcPayload {
    jsonrpc: string;
    method: string;
    params: unknown[];
    id?: string | number;
}
export interface JsonRpcResult<T> {
    id: number;
    jsonrpc: string;
    result: T;
    error?: {
        code: number;
        message: string;
        data: string;
    };
}
/**
 * Check if an object is a valid HttpProviderLike object.
 *
 * @param {any} provider
 * @return {boolean}
 */
export declare const isHttpProvider: (provider: unknown) => provider is HttpProviderLike;
/**
 * Call the contract with the HTTP provider. This throws an error if the call failed.
 *
 * @param {HttpProviderLike} provider
 * @param {string} contractAddress
 * @param {string} data
 * @return {Promise<Buffer>}
 */
export declare const callWithHttp: (provider: HttpProviderLike, contractAddress: string, data: string) => Promise<Buffer>;
/**
 * Get the JSON-RPC payload for the `eth_call` function.
 *
 * @param {string} to The address to send the call to, as a hexadecimal string.
 * @param {string} data The data to send to the address, as a hexadecimal string.
 */
export declare const getPayload: <Data>(to: string, data: Data) => JsonRpcPayload;
export {};
//# sourceMappingURL=http.d.ts.map