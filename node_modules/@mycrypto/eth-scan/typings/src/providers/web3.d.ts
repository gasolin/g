/// <reference types="node" />
import { JsonRpcPayload, JsonRpcResult } from './http';
export interface Web3ProviderLike {
    currentProvider: {
        send<T>(payload: JsonRpcPayload, callback: (error: Error | null, result?: JsonRpcResult<T>) => void): void;
    };
}
/**
 * Check if an object is a valid Web3ProviderLike object.
 *
 * @param {any} provider
 * @return {boolean}
 */
export declare const isWeb3Provider: (provider: unknown) => provider is Web3ProviderLike;
/**
 * Call the contract with a Web3 provider. This throws an error if the call failed.
 *
 * @param {Web3ProviderLike} provider
 * @param {string} contractAddress
 * @param {string} data
 * @return {Promise<Buffer>}
 */
export declare const callWithWeb3: (provider: Web3ProviderLike, contractAddress: string, data: string) => Promise<Buffer>;
export declare const send: <T>(provider: Web3ProviderLike, payload: JsonRpcPayload) => Promise<JsonRpcResult<T>>;
//# sourceMappingURL=web3.d.ts.map