import { ProviderLike } from './providers';
/**
 * An object that contains the address (key) and balance or balance (value).
 */
export interface BalanceMap<T = bigint> {
    [key: string]: T;
}
export interface EthScanOptions {
    /**
     * The address of the contract to use. Defaults to 0xbb4AAaF8cAA1A575B43E7673e5b155C1c5A8BC13.
     */
    contractAddress?: string;
    /**
     * It's not possible to check thousands of addresses at the same time, due to gas limitations.
     * Calls are split per `batchSize` addresses, by default set to 1000.
     */
    batchSize?: number;
}
/**
 * Get the Ether balances for the addresses specified.
 *
 * @param {ProviderLike} provider
 * @param {string[]} addresses
 * @param {EthScanOptions} options
 * @return {Promise<BalanceMap>}
 */
export declare const getEtherBalances: (provider: ProviderLike, addresses: string[], options?: EthScanOptions | undefined) => Promise<BalanceMap>;
/**
 * Get the ERC-20 token balances of the token with the address `tokenAddress` for the addresses
 * specified.
 *
 * @param {ProviderLike} provider
 * @param {string[]} addresses
 * @param {string} tokenAddress
 * @param {EthScanOptions} options
 * @return {Promise<BalanceMap>}
 */
export declare const getTokenBalances: (provider: ProviderLike, addresses: string[], tokenAddress: string, options?: EthScanOptions | undefined) => Promise<BalanceMap>;
/**
 * Get the ERC-20 token balances for multiple contracts, for multiple addresses. Note that this may fail if there are
 * too many addresses or tokens, and the batch size is too large.
 *
 * @param {ProviderLike} provider
 * @param {string[]} addresses
 * @param {string[]} tokenAddresses
 * @param {EthScanOptions} options
 * @return {Promise<BalanceMap<BalanceMap>>}
 */
export declare const getTokensBalances: (provider: ProviderLike, addresses: string[], tokenAddresses: string[], options?: EthScanOptions | undefined) => Promise<BalanceMap<BalanceMap>>;
/**
 * Get the ERC-20 token balance of the tokens with the addresses `tokenAddresses` for the single
 * address specified.
 *
 * @param {ProviderLike} provider
 * @param {string} address
 * @param {string[]} tokenAddresses
 * @param {EthScanOptions} options
 * @return {Promise<BalanceMap>}
 */
export declare const getTokensBalance: (provider: ProviderLike, address: string, tokenAddresses: string[], options?: EthScanOptions | undefined) => Promise<BalanceMap>;
/**
 * Get a balance map from an array of addresses and an array of balances.
 *
 * @param {string[]} addresses
 * @param {bigint[]} balances
 * @return {BalanceMap}
 */
export declare const toBalanceMap: (addresses: string[], balances: Array<bigint>) => BalanceMap;
/**
 * Get a nested balance map from an array of addresses, token addresses, and balances.
 *
 * @param {string[]} addresses
 * @param {bigint[]} tokenAddresses
 * @param {BalanceMap<BalanceMap>} balances
 */
export declare const toNestedBalanceMap: (addresses: string[], tokenAddresses: string[], balances: Array<Array<bigint>>) => BalanceMap<BalanceMap>;
//# sourceMappingURL=eth-scan.d.ts.map