/// <reference types="node" />
/**
 * Encode the addresses and an optional token to an input data string.
 *
 * @param {string[]} inputs An array of inputs.
 * @param {...any[]} data The arguments as defined by the types.
 * @return {string} The input data formatted as hexadecimal string.
 */
export declare const encode: (inputs: string[], ...data: unknown[]) => string;
/**
 * Decode data from a raw Buffer.
 *
 * @param {string[]} inputs An array of inputs.
 * @param {Buffer} data The Buffer to decode.
 * @return {T} The decoded data.
 * @template T
 */
export declare const decode: <T extends unknown[]>(inputs: string[], data: Buffer) => T;
/**
 * Encode the addresses and an optional token to an input data string with the function identifier.
 *
 * @param {string} id The function identifier as a hexadecimal string.
 * @param {string[]} types An array of inputs.
 * @param {...any[]} data The arguments as defined by the types.
 * @return {string} The input data as a hexadecimal string.
 */
export declare const encodeWithId: (id: string, types: string[], ...data: unknown[]) => string;
/**
 * Get the buffer as hexadecimal string, prefixed with 0x.
 *
 * @param {Buffer} buffer The buffer to encode.
 * @return {string} The hexadecimal string.
 */
export declare const bufferToString: (buffer: Buffer | Uint8Array) => string;
/**
 * Get a buffer from a hexadecimal string.
 *
 * @param {string} data The hexadecimal string including the 0x prefix.
 * @return {Buffer} A Buffer of the hexadecimal string.
 */
export declare const stringToBuffer: (data: string) => Buffer;
//# sourceMappingURL=abi.d.ts.map