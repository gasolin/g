/**
 * Split an array per `size` items.
 *
 * @param {T[]} input
 * @param {number} size
 * @return {T[][]} An array of arrays of the specified type.
 * @template T
 */
export declare const chunk: <T>(input: T[], size: number) => T[][];
/**
 * Batch the function calls to `handler` per `size` items.
 *
 * @param {(addresses: string[]) => Promise<BigNumber[]>} handler A function that takes a batch of addresses and returns the balance for the addresses.
 * @param {number} size The size of the batches.
 * @param {string[]} addresses The addresses to batch.
 * @return {Promise<BigNumber[]>} A promise with the balances.
 */
export declare const batch: <T = bigint>(handler: (addresses: string[]) => Promise<T[]>, size: number, addresses: string[]) => Promise<T[]>;
//# sourceMappingURL=batch.d.ts.map