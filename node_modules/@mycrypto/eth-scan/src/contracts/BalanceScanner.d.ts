/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BalanceScannerInterface extends ethers.utils.Interface {
  functions: {
    "etherBalances(address[])": FunctionFragment;
    "tokenBalances(address[],address)": FunctionFragment;
    "tokensBalance(address,address[])": FunctionFragment;
    "tokensBalances(address[],address[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "etherBalances",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalances",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensBalance",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensBalances",
    values: [string[], string[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "etherBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensBalances",
    data: BytesLike
  ): Result;

  events: {};
}

export class BalanceScanner extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BalanceScannerInterface;

  functions: {
    etherBalances(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<{
      balances: BigNumber[];
      0: BigNumber[];
    }>;

    "etherBalances(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<{
      balances: BigNumber[];
      0: BigNumber[];
    }>;

    tokenBalances(
      addresses: string[],
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      balances: BigNumber[];
      0: BigNumber[];
    }>;

    "tokenBalances(address[],address)"(
      addresses: string[],
      token: string,
      overrides?: CallOverrides
    ): Promise<{
      balances: BigNumber[];
      0: BigNumber[];
    }>;

    tokensBalance(
      owner: string,
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<{
      balances: BigNumber[];
      0: BigNumber[];
    }>;

    "tokensBalance(address,address[])"(
      owner: string,
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<{
      balances: BigNumber[];
      0: BigNumber[];
    }>;

    tokensBalances(
      addresses: string[],
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<{
      balances: BigNumber[][];
      0: BigNumber[][];
    }>;

    "tokensBalances(address[],address[])"(
      addresses: string[],
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<{
      balances: BigNumber[][];
      0: BigNumber[][];
    }>;
  };

  etherBalances(
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "etherBalances(address[])"(
    addresses: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  tokenBalances(
    addresses: string[],
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "tokenBalances(address[],address)"(
    addresses: string[],
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  tokensBalance(
    owner: string,
    contracts: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "tokensBalance(address,address[])"(
    owner: string,
    contracts: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  tokensBalances(
    addresses: string[],
    contracts: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[][]>;

  "tokensBalances(address[],address[])"(
    addresses: string[],
    contracts: string[],
    overrides?: CallOverrides
  ): Promise<BigNumber[][]>;

  callStatic: {
    etherBalances(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "etherBalances(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    tokenBalances(
      addresses: string[],
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "tokenBalances(address[],address)"(
      addresses: string[],
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    tokensBalance(
      owner: string,
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "tokensBalance(address,address[])"(
      owner: string,
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    tokensBalances(
      addresses: string[],
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[][]>;

    "tokensBalances(address[],address[])"(
      addresses: string[],
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber[][]>;
  };

  filters: {};

  estimateGas: {
    etherBalances(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "etherBalances(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenBalances(
      addresses: string[],
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokenBalances(address[],address)"(
      addresses: string[],
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensBalance(
      owner: string,
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensBalance(address,address[])"(
      owner: string,
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokensBalances(
      addresses: string[],
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "tokensBalances(address[],address[])"(
      addresses: string[],
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    etherBalances(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "etherBalances(address[])"(
      addresses: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenBalances(
      addresses: string[],
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenBalances(address[],address)"(
      addresses: string[],
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensBalance(
      owner: string,
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensBalance(address,address[])"(
      owner: string,
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokensBalances(
      addresses: string[],
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokensBalances(address[],address[])"(
      addresses: string[],
      contracts: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
