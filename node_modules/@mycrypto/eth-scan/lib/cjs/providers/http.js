"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getPayload=exports.callWithHttp=exports.isHttpProvider=void 0;var _isomorphicUnfetch=_interopRequireDefault(require("isomorphic-unfetch")),_utils=require("../utils");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}/**
 * Check if an object is a valid HttpProviderLike object.
 *
 * @param {any} provider
 * @return {boolean}
 */const isHttpProvider=a=>"string"==typeof a||"object"==typeof a&&void 0!==a.url;/**
 * Call the contract with the HTTP provider. This throws an error if the call failed.
 *
 * @param {HttpProviderLike} provider
 * @param {string} contractAddress
 * @param {string} data
 * @return {Promise<Buffer>}
 */exports.isHttpProvider=isHttpProvider;const callWithHttp=async(a,b,c)=>{const d="string"==typeof a?a:a.url,e="object"==typeof a?a.params:{},f=getPayload(b,c),g=await(0,_isomorphicUnfetch.default)(d,{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(f),cache:"no-cache",...e}),h=await g.json();if(h.error)throw new Error(`Contract call failed: ${h.error.message}`);return(0,_utils.stringToBuffer)(h.result)};/**
 * Get the JSON-RPC payload for the `eth_call` function.
 *
 * @param {string} to The address to send the call to, as a hexadecimal string.
 * @param {string} data The data to send to the address, as a hexadecimal string.
 */exports.callWithHttp=callWithHttp;const getPayload=(a,b)=>({jsonrpc:"2.0",method:"eth_call",params:[{to:a,data:b},"latest"],id:1});exports.getPayload=getPayload;
//# sourceMappingURL=http.js.map