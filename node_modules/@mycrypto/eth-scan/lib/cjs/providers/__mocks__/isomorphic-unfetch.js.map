{"version":3,"sources":["../../../../src/providers/__mocks__/isomorphic-unfetch.ts"],"names":["url","body","id","jsonrpc","params","options","JSON","parse","json","result","ethers","provider","call","to","data"],"mappings":"+IAMe,CAACA,CAAD,CAAc,CAAEC,IAAI,CAAJA,CAAF,CAAd,GAA0F,CACvG,KAAM,CACJC,EAAE,CAAFA,CADI,CAEJC,OAAO,CAAPA,CAFI,CAGJC,MAAM,CAAE,CAACC,CAAD,CAHJ,EAIFC,IAAI,CAACC,KAAL,CAAWN,CAAX,CAJJ,CAMA,MAAO,CACL,KAAMO,CAAAA,IAAN,EAAa,CACX,KAAMC,CAAAA,CAAM,CAAG,KAAMC,iBAAOC,QAAP,CAAgBC,IAAhB,CAAqB,CACxCC,EAAE,CAAER,CAAO,CAACQ,EAD4B,CAExCC,IAAI,CAAET,CAAO,CAACS,IAF0B,CAArB,CAArB,CAKA,MAAO,CACLZ,EAAE,CAAFA,CADK,CAELC,OAAO,CAAPA,CAFK,CAGLM,MAAM,CAANA,CAHK,CAKR,CAZI,CAcR,C","sourcesContent":["import { ethers } from '@nomiclabs/buidler';\nimport { JsonRpcResult } from '../http';\n\n/**\n * Proxies any fetch request to use the Ethers.js object provided by Buidler.\n */\nexport default (url: string, { body }: { body: string }): { json(): Promise<JsonRpcResult<unknown>> } => {\n  const {\n    id,\n    jsonrpc,\n    params: [options]\n  } = JSON.parse(body);\n\n  return {\n    async json() {\n      const result = await ethers.provider.call({\n        to: options.to,\n        data: options.data\n      });\n\n      return {\n        id,\n        jsonrpc,\n        result\n      };\n    }\n  };\n};\n"],"file":"isomorphic-unfetch.js"}