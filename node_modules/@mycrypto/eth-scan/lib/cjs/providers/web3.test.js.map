{"version":3,"sources":["../../../src/providers/web3.test.ts"],"names":["jest","mock","loadFixture","waffle","describe","it","expect","currentProvider","send","toBe","web3","Web3","ethers","provider","connection","url","contract","addresses","fixture","data","ETHER_BALANCES_ID","ETHER_BALANCES_TYPE","response","address","decoded","i","length","balance","BigInt","getBalance","toHexString","token","balanceOf","returns","TOKEN_BALANCES_ID","TOKEN_BALANCES_TYPE"],"mappings":"wSAOAA,IAAI,CAACC,IAAL,CAAU,MAAV,C,CAEA,KAAM,CAAEC,WAAF,EAAkBC,eAAxB,CAEAC,QAAQ,CAAC,gBAAD,CAAmB,IAAM,CAC/BC,EAAE,CAAC,0CAAD,CAA6C,IAAM,CACnDC,MAAM,CACJ,yBAAe,CACbC,eAAe,CAAE,CACfC,IAAI,EAAS,CACX,UACD,CAHc,CADJ,CAAf,CADI,CAAN,CAQEC,IARF,IADmD,CAUnDH,MAAM,CAAC,yBAAe,EAAf,CAAD,CAAN,CAA2BG,IAA3B,IACD,CAXC,CAYH,CAbO,C,CAeRL,QAAQ,CAAC,cAAD,CAAiB,IAAM,CAC7B,KAAMM,CAAAA,CAAI,CAAG,GAAIC,aAAJ,CAASC,gBAAOC,QAAP,CAAgBC,UAAhB,CAA2BC,GAApC,CAAb,CAEAV,EAAE,CAAC,2CAAD,CAA8C,SAAY,MACpD,CAAEW,QAAQ,CAARA,CAAF,CAAYC,SAAS,CAATA,CAAZ,EAA0B,KAAMf,CAAAA,WAAW,CAACgB,gBAAD,CADS,CAGpDC,CAAI,CAAG,wBAAaC,4BAAb,CAAgCC,8BAAhC,CAAqDJ,CAArD,CAH6C,CAIpDK,CAAQ,CAAG,KAAM,uBAAcZ,CAAd,CAAoDM,CAAQ,CAACO,OAA7D,CAAsEJ,CAAtE,CAJmC,CAMpDK,CAAO,CAAG,kBAAwB,CAAC,WAAD,CAAxB,CAAuCF,CAAvC,EAAiD,CAAjD,CAN0C,CAQ1D,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGR,CAAS,CAACS,MAA9B,CAAsCD,CAAC,EAAvC,CAA2C,CACzC,KAAME,CAAAA,CAAO,CAAGC,MAAM,CAAC,CAAC,KAAMhB,iBAAOC,QAAP,CAAgBgB,UAAhB,CAA2BZ,CAAS,CAACQ,CAAD,CAApC,CAAP,EAAiDK,WAAjD,EAAD,CAAtB,CACAxB,MAAM,CAACqB,CAAD,CAAN,CAAgBlB,IAAhB,CAAqBe,CAAO,CAACC,CAAD,CAA5B,CACD,CACF,CAZC,CAH2B,CAiB7BpB,EAAE,CAAC,2CAAD,CAA8C,SAAY,CAC1D,KAAM,CAAEW,QAAQ,CAARA,CAAF,CAAYC,SAAS,CAATA,CAAZ,CAAuBc,KAAK,CAALA,CAAvB,EAAiC,KAAM7B,CAAAA,WAAW,CAACgB,gBAAD,CAAxD,CACA,KAAMa,CAAAA,CAAK,CAAC9B,IAAN,CAAW+B,SAAX,CAAqBC,OAArB,CAA6B,MAA7B,CAFoD,MAIpDd,CAAAA,CAAI,CAAG,wBAAae,4BAAb,CAAgCC,8BAAhC,CAAqDlB,CAArD,CAAgEc,CAAK,CAACR,OAAtE,CAJ6C,CAKpDD,CAAQ,CAAG,KAAM,uBAAcZ,CAAd,CAAoDM,CAAQ,CAACO,OAA7D,CAAsEJ,CAAtE,CALmC,CAOpDK,CAAO,CAAG,kBAAwB,CAAC,WAAD,CAAxB,CAAuCF,CAAvC,EAAiD,CAAjD,CAP0C,CAS1D,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGR,CAAS,CAACS,MAA9B,CAAsCD,CAAC,EAAvC,CACEnB,MAAM,CAACkB,CAAO,CAACC,CAAD,CAAR,CAAN,CAAmBhB,IAAnB,CAAwB,KAAxB,CAEH,CAZC,CAaH,CA9BO,C","sourcesContent":["import { ethers, waffle } from '@nomiclabs/buidler';\nimport Web3 from 'web3';\nimport { ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, TOKEN_BALANCES_ID, TOKEN_BALANCES_TYPE } from '../constants';\nimport { fixture } from '../eth-scan.test';\nimport { decode, encodeWithId } from '../utils';\nimport { callWithWeb3, isWeb3Provider, Web3ProviderLike } from './web3';\n\njest.mock('web3');\n\nconst { loadFixture } = waffle;\n\ndescribe('isWeb3Provider', () => {\n  it('checks if a provider is an HTTP provider', () => {\n    expect(\n      isWeb3Provider({\n        currentProvider: {\n          send(): void {\n            /* noop */\n          }\n        }\n      })\n    ).toBe(true);\n    expect(isWeb3Provider({})).toBe(false);\n  });\n});\n\ndescribe('callWithWeb3', () => {\n  const web3 = new Web3(ethers.provider.connection.url);\n\n  it('gets the Ether balances from the contract', async () => {\n    const { contract, addresses } = await loadFixture(fixture);\n\n    const data = encodeWithId(ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, addresses);\n    const response = await callWithWeb3((web3 as unknown) as Web3ProviderLike, contract.address, data);\n\n    const decoded = decode<[Array<bigint>]>(['uint256[]'], response)[0];\n\n    for (let i = 0; i < addresses.length; i++) {\n      const balance = BigInt((await ethers.provider.getBalance(addresses[i])).toHexString());\n      expect(balance).toBe(decoded[i]);\n    }\n  });\n\n  it('gets the token balances from the contract', async () => {\n    const { contract, addresses, token } = await loadFixture(fixture);\n    await token.mock.balanceOf.returns('1000');\n\n    const data = encodeWithId(TOKEN_BALANCES_ID, TOKEN_BALANCES_TYPE, addresses, token.address);\n    const response = await callWithWeb3((web3 as unknown) as Web3ProviderLike, contract.address, data);\n\n    const decoded = decode<[Array<bigint>]>(['uint256[]'], response)[0];\n\n    for (let i = 0; i < addresses.length; i++) {\n      expect(decoded[i]).toBe(1000n);\n    }\n  });\n});\n"],"file":"web3.test.js"}