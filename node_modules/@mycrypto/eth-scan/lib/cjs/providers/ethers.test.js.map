{"version":3,"sources":["../../../src/providers/ethers.test.ts"],"names":["loadFixture","waffle","describe","it","expect","ethers","provider","toBe","contract","addresses","fixture","data","ETHER_BALANCES_ID","ETHER_BALANCES_TYPE","response","address","decoded","i","length","balance","BigInt","getBalance","toHexString","token","mock","balanceOf","returns","TOKEN_BALANCES_ID","TOKEN_BALANCES_TYPE"],"mappings":"uLAMA,KAAM,CAAEA,WAAF,EAAkBC,eAAxB,CAEAC,QAAQ,CAAC,kBAAD,CAAqB,IAAM,CACjCC,EAAE,CAAC,+CAAD,CAAkD,IAAM,CACxDC,MAAM,CAAC,6BAAiBC,gBAAOC,QAAxB,CAAD,CAAN,CAA0CC,IAA1C,IADwD,CAExDH,MAAM,CAAC,6BAAiB,EAAjB,CAAD,CAAN,CAA6BG,IAA7B,IACD,CAHC,CAIH,CALO,C,CAORL,QAAQ,CAAC,gBAAD,CAAmB,IAAM,CAC/BC,EAAE,CAAC,2CAAD,CAA8C,SAAY,MACpD,CAAEK,QAAQ,CAARA,CAAF,CAAYC,SAAS,CAATA,CAAZ,EAA0B,KAAMT,CAAAA,WAAW,CAACU,gBAAD,CADS,CAGpDC,CAAI,CAAG,wBAAaC,4BAAb,CAAgCC,8BAAhC,CAAqDJ,CAArD,CAH6C,CAIpDK,CAAQ,CAAG,KAAM,2BAAeT,gBAAOC,QAAtB,CAAgCE,CAAQ,CAACO,OAAzC,CAAkDJ,CAAlD,CAJmC,CAMpDK,CAAO,CAAG,kBAAwB,CAAC,WAAD,CAAxB,CAAuCF,CAAvC,EAAiD,CAAjD,CAN0C,CAQ1D,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGR,CAAS,CAACS,MAA9B,CAAsCD,CAAC,EAAvC,CAA2C,CACzC,KAAME,CAAAA,CAAO,CAAGC,MAAM,CAAC,CAAC,KAAMf,iBAAOC,QAAP,CAAgBe,UAAhB,CAA2BZ,CAAS,CAACQ,CAAD,CAApC,CAAP,EAAiDK,WAAjD,EAAD,CAAtB,CACAlB,MAAM,CAACe,CAAD,CAAN,CAAgBZ,IAAhB,CAAqBS,CAAO,CAACC,CAAD,CAA5B,CACD,CACF,CAZC,CAD6B,CAe/Bd,EAAE,CAAC,2CAAD,CAA8C,SAAY,CAC1D,KAAM,CAAEK,QAAQ,CAARA,CAAF,CAAYC,SAAS,CAATA,CAAZ,CAAuBc,KAAK,CAALA,CAAvB,EAAiC,KAAMvB,CAAAA,WAAW,CAACU,gBAAD,CAAxD,CACA,KAAMa,CAAAA,CAAK,CAACC,IAAN,CAAWC,SAAX,CAAqBC,OAArB,CAA6B,MAA7B,CAFoD,MAIpDf,CAAAA,CAAI,CAAG,wBAAagB,4BAAb,CAAgCC,8BAAhC,CAAqDnB,CAArD,CAAgEc,CAAK,CAACR,OAAtE,CAJ6C,CAKpDD,CAAQ,CAAG,KAAM,2BAAeT,gBAAOC,QAAtB,CAAgCE,CAAQ,CAACO,OAAzC,CAAkDJ,CAAlD,CALmC,CAOpDK,CAAO,CAAG,kBAAwB,CAAC,WAAD,CAAxB,CAAuCF,CAAvC,EAAiD,CAAjD,CAP0C,CAS1D,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGR,CAAS,CAACS,MAA9B,CAAsCD,CAAC,EAAvC,CACEb,MAAM,CAACY,CAAO,CAACC,CAAD,CAAR,CAAN,CAAmBV,IAAnB,CAAwB,KAAxB,CAEH,CAZC,CAaH,CA5BO,C","sourcesContent":["import { ethers, waffle } from '@nomiclabs/buidler';\nimport { ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, TOKEN_BALANCES_ID, TOKEN_BALANCES_TYPE } from '../constants';\nimport { fixture } from '../eth-scan.test';\nimport { decode, encodeWithId } from '../utils';\nimport { callWithEthers, isEthersProvider } from './ethers';\n\nconst { loadFixture } = waffle;\n\ndescribe('isEthersProvider', () => {\n  it('checks if a provider is an Ethers.js provider', () => {\n    expect(isEthersProvider(ethers.provider)).toBe(true);\n    expect(isEthersProvider({})).toBe(false);\n  });\n});\n\ndescribe('callWithEthers', () => {\n  it('gets the Ether balances from the contract', async () => {\n    const { contract, addresses } = await loadFixture(fixture);\n\n    const data = encodeWithId(ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, addresses);\n    const response = await callWithEthers(ethers.provider, contract.address, data);\n\n    const decoded = decode<[Array<bigint>]>(['uint256[]'], response)[0];\n\n    for (let i = 0; i < addresses.length; i++) {\n      const balance = BigInt((await ethers.provider.getBalance(addresses[i])).toHexString());\n      expect(balance).toBe(decoded[i]);\n    }\n  });\n\n  it('gets the token balances from the contract', async () => {\n    const { contract, addresses, token } = await loadFixture(fixture);\n    await token.mock.balanceOf.returns('1000');\n\n    const data = encodeWithId(TOKEN_BALANCES_ID, TOKEN_BALANCES_TYPE, addresses, token.address);\n    const response = await callWithEthers(ethers.provider, contract.address, data);\n\n    const decoded = decode<[Array<bigint>]>(['uint256[]'], response)[0];\n\n    for (let i = 0; i < addresses.length; i++) {\n      expect(decoded[i]).toBe(1000n);\n    }\n  });\n});\n"],"file":"ethers.test.js"}