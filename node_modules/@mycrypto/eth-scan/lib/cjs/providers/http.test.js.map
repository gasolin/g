{"version":3,"sources":["../../../src/providers/http.test.ts"],"names":["jest","mock","loadFixture","waffle","describe","it","expect","toBe","url","contract","addresses","fixture","data","ETHER_BALANCES_ID","ETHER_BALANCES_TYPE","response","ethers","provider","connection","address","decoded","i","length","balance","BigInt","getBalance","toHexString","token","balanceOf","returns","TOKEN_BALANCES_ID","TOKEN_BALANCES_TYPE"],"mappings":"mLAMAA,IAAI,CAACC,IAAL,CAAU,oBAAV,C,CAEA,KAAM,CAAEC,WAAF,EAAkBC,eAAxB,CAEAC,QAAQ,CAAC,gBAAD,CAAmB,IAAM,CAC/BC,EAAE,CAAC,0CAAD,CAA6C,IAAM,CACnDC,MAAM,CAAC,yBAAe,aAAf,CAAD,CAAN,CAAsCC,IAAtC,IADmD,CAEnDD,MAAM,CACJ,yBAAe,CACbE,GAAG,CAAE,aADQ,CAAf,CADI,CAAN,CAIED,IAJF,IAFmD,CAOnDD,MAAM,CAAC,yBAAe,EAAf,CAAD,CAAN,CAA2BC,IAA3B,IACD,CARC,CASH,CAVO,C,CAYRH,QAAQ,CAAC,cAAD,CAAiB,IAAM,CAC7BC,EAAE,CAAC,2CAAD,CAA8C,SAAY,MACpD,CAAEI,QAAQ,CAARA,CAAF,CAAYC,SAAS,CAATA,CAAZ,EAA0B,KAAMR,CAAAA,WAAW,CAACS,gBAAD,CADS,CAGpDC,CAAI,CAAG,wBAAaC,4BAAb,CAAgCC,8BAAhC,CAAqDJ,CAArD,CAH6C,CAIpDK,CAAQ,CAAG,KAAM,uBAAaC,gBAAOC,QAAP,CAAgBC,UAAhB,CAA2BV,GAAxC,CAA6CC,CAAQ,CAACU,OAAtD,CAA+DP,CAA/D,CAJmC,CAMpDQ,CAAO,CAAG,kBAAwB,CAAC,WAAD,CAAxB,CAAuCL,CAAvC,EAAiD,CAAjD,CAN0C,CAQ1D,IAAK,GAAIM,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGX,CAAS,CAACY,MAA9B,CAAsCD,CAAC,EAAvC,CAA2C,CACzC,KAAME,CAAAA,CAAO,CAAGC,MAAM,CAAC,CAAC,KAAMR,iBAAOC,QAAP,CAAgBQ,UAAhB,CAA2Bf,CAAS,CAACW,CAAD,CAApC,CAAP,EAAiDK,WAAjD,EAAD,CAAtB,CACApB,MAAM,CAACiB,CAAD,CAAN,CAAgBhB,IAAhB,CAAqBa,CAAO,CAACC,CAAD,CAA5B,CACD,CACF,CAZC,CAD2B,CAe7BhB,EAAE,CAAC,2CAAD,CAA8C,SAAY,CAC1D,KAAM,CAAEI,QAAQ,CAARA,CAAF,CAAYC,SAAS,CAATA,CAAZ,CAAuBiB,KAAK,CAALA,CAAvB,EAAiC,KAAMzB,CAAAA,WAAW,CAACS,gBAAD,CAAxD,CACA,KAAMgB,CAAAA,CAAK,CAAC1B,IAAN,CAAW2B,SAAX,CAAqBC,OAArB,CAA6B,MAA7B,CAFoD,MAIpDjB,CAAAA,CAAI,CAAG,wBAAakB,4BAAb,CAAgCC,8BAAhC,CAAqDrB,CAArD,CAAgEiB,CAAK,CAACR,OAAtE,CAJ6C,CAKpDJ,CAAQ,CAAG,KAAM,uBAAaC,gBAAOC,QAAP,CAAgBC,UAAhB,CAA2BV,GAAxC,CAA6CC,CAAQ,CAACU,OAAtD,CAA+DP,CAA/D,CALmC,CAOpDQ,CAAO,CAAG,kBAAwB,CAAC,WAAD,CAAxB,CAAuCL,CAAvC,EAAiD,CAAjD,CAP0C,CAS1D,IAAK,GAAIM,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGX,CAAS,CAACY,MAA9B,CAAsCD,CAAC,EAAvC,CACEf,MAAM,CAACc,CAAO,CAACC,CAAD,CAAR,CAAN,CAAmBd,IAAnB,CAAwB,KAAxB,CAEH,CAZC,CAaH,CA5BO,C","sourcesContent":["import { ethers, waffle } from '@nomiclabs/buidler';\nimport { ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, TOKEN_BALANCES_ID, TOKEN_BALANCES_TYPE } from '../constants';\nimport { fixture } from '../eth-scan.test';\nimport { decode, encodeWithId } from '../utils';\nimport { callWithHttp, isHttpProvider } from './http';\n\njest.mock('isomorphic-unfetch');\n\nconst { loadFixture } = waffle;\n\ndescribe('isHttpProvider', () => {\n  it('checks if a provider is an HTTP provider', () => {\n    expect(isHttpProvider('https://foo')).toBe(true);\n    expect(\n      isHttpProvider({\n        url: 'https://foo'\n      })\n    ).toBe(true);\n    expect(isHttpProvider({})).toBe(false);\n  });\n});\n\ndescribe('callWithHttp', () => {\n  it('gets the Ether balances from the contract', async () => {\n    const { contract, addresses } = await loadFixture(fixture);\n\n    const data = encodeWithId(ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, addresses);\n    const response = await callWithHttp(ethers.provider.connection.url, contract.address, data);\n\n    const decoded = decode<[Array<bigint>]>(['uint256[]'], response)[0];\n\n    for (let i = 0; i < addresses.length; i++) {\n      const balance = BigInt((await ethers.provider.getBalance(addresses[i])).toHexString());\n      expect(balance).toBe(decoded[i]);\n    }\n  });\n\n  it('gets the token balances from the contract', async () => {\n    const { contract, addresses, token } = await loadFixture(fixture);\n    await token.mock.balanceOf.returns('1000');\n\n    const data = encodeWithId(TOKEN_BALANCES_ID, TOKEN_BALANCES_TYPE, addresses, token.address);\n    const response = await callWithHttp(ethers.provider.connection.url, contract.address, data);\n\n    const decoded = decode<[Array<bigint>]>(['uint256[]'], response)[0];\n\n    for (let i = 0; i < addresses.length; i++) {\n      expect(decoded[i]).toBe(1000n);\n    }\n  });\n});\n"],"file":"http.test.js"}