{"version":3,"sources":["../../../src/utils/batch.test.ts"],"names":["describe","array","it","chunked","expect","toHaveLength","toBe","handler","jest","fn","mockImplementation","addresses","map","BigNumber","from","balances","toHaveBeenCalledTimes","toHaveBeenNthCalledWith"],"mappings":"0FAGAA,QAAQ,CAAC,OAAD,CAAU,IAAM,CACtB,KAAMC,CAAAA,CAAK,CAAG,CAAC,KAAD,CAAQ,KAAR,CAAe,KAAf,CAAsB,KAAtB,CAAd,CAEAC,EAAE,CAAC,kCAAD,CAAqC,IAAM,CAC3C,KAAMC,CAAAA,CAAO,CAAG,iBAAMF,CAAN,CAAa,CAAb,CAAhB,CAEAG,MAAM,CAACD,CAAD,CAAN,CAAgBE,YAAhB,CAA6B,CAA7B,CAH2C,CAI3CD,MAAM,CAACD,CAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAD,CAAN,CAAsBG,IAAtB,CAA2B,KAA3B,CAJ2C,CAK3CF,MAAM,CAACD,CAAO,CAAC,CAAD,CAAP,CAAW,CAAX,CAAD,CAAN,CAAsBG,IAAtB,CAA2B,KAA3B,CACD,CANC,CAHoB,CAWtBJ,EAAE,CAAC,0BAAD,CAA6B,IAAM,CACnC,KAAMC,CAAAA,CAAO,CAAG,iBAAMF,CAAN,CAAa,CAAb,CAAhB,CAEAG,MAAM,CAACD,CAAD,CAAN,CAAgBE,YAAhB,CAA6B,CAA7B,CAHmC,CAInCD,MAAM,CAACD,CAAO,CAAC,CAAD,CAAR,CAAN,CAAmBE,YAAnB,CAAgC,CAAhC,CAJmC,CAKnCD,MAAM,CAACD,CAAO,CAAC,CAAD,CAAR,CAAN,CAAmBE,YAAnB,CAAgC,CAAhC,CACD,CANC,CAOH,CAlBO,C,CAoBRL,QAAQ,CAAC,OAAD,CAAU,IAAM,CACtBE,EAAE,CAAC,6BAAD,CAAgC,SAAY,MACtCK,CAAAA,CAAO,CAAGC,IAAI,CAACC,EAAL,GAAUC,kBAAV,CACd,MAAOC,CAAP,GACSA,CAAS,CAACC,GAAV,CAAc,IAAMC,qBAAUC,IAAV,CAAe,CAAf,CAApB,CAFK,CAD4B,CAOtCC,CAAQ,CAAG,KAAM,iBAAMR,CAAN,CAAe,CAAf,CAAkB,CAAC,KAAD,CAAQ,KAAR,CAAe,KAAf,CAAsB,KAAtB,CAAlB,CAPqB,CAS5CH,MAAM,CAACW,CAAD,CAAN,CAAiBV,YAAjB,CAA8B,CAA9B,CAT4C,CAU5CD,MAAM,CAACG,CAAD,CAAN,CAAgBS,qBAAhB,CAAsC,CAAtC,CAV4C,CAW5CZ,MAAM,CAACG,CAAD,CAAN,CAAgBU,uBAAhB,CAAwC,CAAxC,CAA2C,CAAC,KAAD,CAAQ,KAAR,CAA3C,CAX4C,CAY5Cb,MAAM,CAACG,CAAD,CAAN,CAAgBU,uBAAhB,CAAwC,CAAxC,CAA2C,CAAC,KAAD,CAAQ,KAAR,CAA3C,CACD,CAbC,CAcH,CAfO,C","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber';\nimport { batch, chunk } from './batch';\n\ndescribe('chunk', () => {\n  const array = ['foo', 'bar', 'baz', 'qux'];\n\n  it('should create chunks of an array', () => {\n    const chunked = chunk(array, 2);\n\n    expect(chunked).toHaveLength(2);\n    expect(chunked[0][0]).toBe('foo');\n    expect(chunked[1][0]).toBe('baz');\n  });\n\n  it('should keep uneven items', () => {\n    const chunked = chunk(array, 3);\n\n    expect(chunked).toHaveLength(2);\n    expect(chunked[0]).toHaveLength(3);\n    expect(chunked[1]).toHaveLength(1);\n  });\n});\n\ndescribe('batch', () => {\n  it('should batch function calls', async () => {\n    const handler = jest.fn().mockImplementation(\n      async (addresses: string[]): Promise<BigNumber[]> => {\n        return addresses.map(() => BigNumber.from(1));\n      }\n    );\n\n    const balances = await batch(handler, 2, ['0x0', '0x1', '0x2', '0x3']);\n\n    expect(balances).toHaveLength(4);\n    expect(handler).toHaveBeenCalledTimes(2);\n    expect(handler).toHaveBeenNthCalledWith(1, ['0x0', '0x1']);\n    expect(handler).toHaveBeenNthCalledWith(2, ['0x2', '0x3']);\n  });\n});\n"],"file":"batch.test.js"}