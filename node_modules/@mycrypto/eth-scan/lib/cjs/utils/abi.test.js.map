{"version":3,"sources":["../../../src/utils/abi.test.ts"],"names":["describe","it","encoded","decoded","expect","toHaveLength","toBe","ETHER_BALANCES_TYPE","TOKEN_BALANCES_TYPE","ETHER_BALANCES_ID","TOKEN_BALANCES_ID"],"mappings":"0EAGAA,QAAQ,CAAC,QAAD,CAAW,IAAM,CACvBC,EAAE,CAAC,oBAAD,CAAuB,IAAM,MACvBC,CAAAA,CAAO,CAAG,6NADa,CAQvBC,CAAO,CAAG,gBAAwB,CAAC,WAAD,CAAxB,CAAuCD,CAAvC,EAAgD,CAAhD,CARa,CAS7BE,MAAM,CAACD,CAAD,CAAN,CAAgBE,YAAhB,CAA6B,CAA7B,CAT6B,CAU7BD,MAAM,CAACD,CAAO,CAAC,CAAD,CAAR,CAAN,CAAmBG,IAAnB,CAAwB,sBAAxB,CACD,CAXC,CAYH,CAbO,C,CAeRN,QAAQ,CAAC,QAAD,CAAW,IAAM,CACvBC,EAAE,CAAC,yBAAD,CAA4B,IAAM,CAClC,KAAMC,CAAAA,CAAO,CAAG,gBAAOK,8BAAP,CAA4B,CAAC,4CAAD,CAA5B,CAAhB,CAEAH,MAAM,CAACF,CAAD,CAAN,CAAgBI,IAAhB,sMAMD,CATC,CADqB,CAYvBL,EAAE,CAAC,gDAAD,CAAmD,IAAM,CACzD,KAAMC,CAAAA,CAAO,CAAG,gBACdM,8BADc,CAEd,CAAC,4CAAD,CAFc,CAGd,4CAHc,CAAhB,CAMAJ,MAAM,CAACF,CAAD,CAAN,CAAgBI,IAAhB,sQAOD,CAdC,CAeH,CA3BO,C,CA6BRN,QAAQ,CAAC,cAAD,CAAiB,IAAM,CAC7BC,EAAE,CAAC,oDAAD,CAAuD,IAAM,CAC7D,KAAMC,CAAAA,CAAO,CAAG,sBAAaO,4BAAb,CAAgCF,8BAAhC,CAAqD,CACnE,4CADmE,CAArD,CAAhB,CAIAH,MAAM,CAACF,CAAD,CAAN,CAAgBI,IAAhB,CACE,KACEG,4BADF,mMADF,CAOD,CAZC,CAD2B,CAe7BR,EAAE,CAAC,0EAAD,CAA6E,IAAM,CACnF,KAAMC,CAAAA,CAAO,CAAG,sBACdQ,4BADc,CAEdF,8BAFc,CAGd,CAAC,4CAAD,CAHc,CAId,4CAJc,CAAhB,CAOAJ,MAAM,CAACF,CAAD,CAAN,CAAgBI,IAAhB,CACE,KACEI,4BADF,mQADF,CAQD,CAhBC,CAiBH,CAhCO,C","sourcesContent":["import { ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, TOKEN_BALANCES_ID, TOKEN_BALANCES_TYPE } from '../constants';\nimport { decode, encode, encodeWithId, stringToBuffer } from './abi';\n\ndescribe('decode', () => {\n  it('should decode data', () => {\n    const encoded = stringToBuffer(\n      '0x' +\n        '0000000000000000000000000000000000000000000000000000000000000020' +\n        '0000000000000000000000000000000000000000000000000000000000000001' +\n        '0000000000000000000000000000000000000000000000056bc75e2d63100000'\n    );\n\n    const decoded = decode<[Array<bigint>]>(['uint256[]'], encoded)[0];\n    expect(decoded).toHaveLength(1);\n    expect(decoded[0]).toBe(100000000000000000000n);\n  });\n});\n\ndescribe('encode', () => {\n  it('should encode addresses', () => {\n    const encoded = encode(ETHER_BALANCES_TYPE, ['0xf00f00f00f00f00f00f00f00f00f00f00f00f00f']);\n\n    expect(encoded).toBe(\n      '0x' +\n        '0000000000000000000000000000000000000000000000000000000000000020' +\n        '0000000000000000000000000000000000000000000000000000000000000001' +\n        '000000000000000000000000f00f00f00f00f00f00f00f00f00f00f00f00f00f'\n    );\n  });\n\n  it('should encode addresses with a token specified', () => {\n    const encoded = encode(\n      TOKEN_BALANCES_TYPE,\n      ['0xf00f00f00f00f00f00f00f00f00f00f00f00f00f'],\n      '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'\n    );\n\n    expect(encoded).toBe(\n      '0x' +\n        '0000000000000000000000000000000000000000000000000000000000000040' +\n        '00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359' +\n        '0000000000000000000000000000000000000000000000000000000000000001' +\n        '000000000000000000000000f00f00f00f00f00f00f00f00f00f00f00f00f00f'\n    );\n  });\n});\n\ndescribe('encodeWithId', () => {\n  it('should encode addresses with a function identifier', () => {\n    const encoded = encodeWithId(ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, [\n      '0xf00f00f00f00f00f00f00f00f00f00f00f00f00f'\n    ]);\n\n    expect(encoded).toBe(\n      '0x' +\n        ETHER_BALANCES_ID +\n        '0000000000000000000000000000000000000000000000000000000000000020' +\n        '0000000000000000000000000000000000000000000000000000000000000001' +\n        '000000000000000000000000f00f00f00f00f00f00f00f00f00f00f00f00f00f'\n    );\n  });\n\n  it('should encode addresses with a function identifier and a token specified', () => {\n    const encoded = encodeWithId(\n      TOKEN_BALANCES_ID,\n      TOKEN_BALANCES_TYPE,\n      ['0xf00f00f00f00f00f00f00f00f00f00f00f00f00f'],\n      '0x89d24a6b4ccb1b6faa2625fe562bdd9a23260359'\n    );\n\n    expect(encoded).toBe(\n      '0x' +\n        TOKEN_BALANCES_ID +\n        '0000000000000000000000000000000000000000000000000000000000000040' +\n        '00000000000000000000000089d24a6b4ccb1b6faa2625fe562bdd9a23260359' +\n        '0000000000000000000000000000000000000000000000000000000000000001' +\n        '000000000000000000000000f00f00f00f00f00f00f00f00f00f00f00f00f00f'\n    );\n  });\n});\n"],"file":"abi.test.js"}