{"version":3,"sources":["../../src/eth-scan.test.ts"],"names":["waffle","ethers","ERC20Artifact","BalanceScannerArtifact","getEtherBalances","getTokenBalances","getTokensBalance","getTokensBalances","deployContract","deployMockContract","loadFixture","fixture","signers","provider","signer","contract","token","abi","addresses","Promise","all","slice","map","s","getAddress","describe","it","balances","contractAddress","address","balance","BigInt","getBalance","toHexString","expect","toBe","mock","balanceOf","returns","not","toThrow","tokenA","tokenB","Object","keys","toHaveLength"],"mappings":"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","sourcesContent":["import { waffle, ethers } from '@nomiclabs/buidler';\nimport { MockContract, MockProvider } from 'ethereum-waffle';\nimport { Signer } from 'ethers';\nimport ERC20Artifact from 'openzeppelin-solidity/build/contracts/IERC20.json';\nimport BalanceScannerArtifact from '../artifacts/BalanceScanner.json';\nimport { BalanceScanner } from './contracts/BalanceScanner';\nimport { getEtherBalances, getTokenBalances, getTokensBalance, getTokensBalances } from './eth-scan';\n\nconst { deployContract, deployMockContract, loadFixture } = waffle;\n\n// eslint-disable-next-line jest/no-export\nexport const fixture = async (\n  signers: Signer[],\n  provider: MockProvider\n): Promise<{\n  contract: BalanceScanner;\n  signers: Signer[];\n  addresses: string[];\n  provider: MockProvider;\n  token: MockContract;\n}> => {\n  const signer = signers[0];\n  const contract = (await deployContract(signer, BalanceScannerArtifact)) as BalanceScanner;\n  const token = (await deployMockContract(signer, ERC20Artifact.abi)) as MockContract;\n\n  const addresses = await Promise.all(signers.slice(1).map((s) => s.getAddress()));\n\n  return { contract, signers, addresses, provider, token };\n};\n\ndescribe('eth-scan', () => {\n  describe('getEtherBalances', () => {\n    it('returns the ether balances for multiple addresses as a BalanceMap', async () => {\n      const { contract, addresses } = await loadFixture(fixture);\n\n      const balances = await getEtherBalances(ethers.provider, addresses, { contractAddress: contract.address });\n      for (const address of addresses) {\n        const balance = BigInt((await ethers.provider.getBalance(address)).toHexString());\n        expect(balance).toBe(balances[address]);\n      }\n    });\n  });\n\n  describe('getTokenBalances', () => {\n    it('returns the token balances of one token, for multiple addresses', async () => {\n      const { contract, addresses, token } = await loadFixture(fixture);\n      await token.mock.balanceOf.returns('1000');\n\n      const balances = await getTokenBalances(ethers.provider, addresses, token.address, {\n        contractAddress: contract.address\n      });\n      for (const address of addresses) {\n        expect(balances[address]).toBe(1000n);\n      }\n    });\n\n    it('does not throw for invalid contracts', async () => {\n      const { contract, addresses, token } = await loadFixture(fixture);\n\n      await expect(() =>\n        getTokenBalances(ethers.provider, addresses, token.address, { contractAddress: contract.address })\n      ).not.toThrow();\n    });\n  });\n\n  describe('getTokensBalances', () => {\n    it('returns multiple token balances, for multiple addresses', async () => {\n      const { contract, signers, addresses } = await loadFixture(fixture);\n      const tokenA = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n      await tokenA.mock.balanceOf.returns('1000');\n\n      const tokenB = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n      await tokenB.mock.balanceOf.returns('1');\n\n      const balances = await getTokensBalances(ethers.provider, addresses, [tokenA.address, tokenB.address], {\n        contractAddress: contract.address\n      });\n      for (const address of addresses) {\n        expect(Object.keys(balances[address])).toHaveLength(2);\n        expect(Object.keys(balances[address])[0]).toBe(tokenA.address);\n        expect(Object.keys(balances[address])[1]).toBe(tokenB.address);\n        expect(balances[address][tokenA.address]).toBe(1000n);\n        expect(balances[address][tokenB.address]).toBe(1n);\n      }\n    });\n\n    it('does not throw for invalid contracts', async () => {\n      const { contract, signers, addresses } = await loadFixture(fixture);\n      const tokenA = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n      const tokenB = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n\n      await expect(() =>\n        getTokensBalances(ethers.provider, addresses, [tokenA.address, tokenB.address], {\n          contractAddress: contract.address\n        })\n      ).not.toThrow();\n    });\n  });\n\n  describe('getTokensBalance', () => {\n    it('returns multiple token balances for a single address', async () => {\n      const { contract, signers, addresses } = await loadFixture(fixture);\n      const tokenA = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n      await tokenA.mock.balanceOf.returns('1000');\n\n      const tokenB = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n      await tokenB.mock.balanceOf.returns('1');\n\n      const balances = await getTokensBalance(ethers.provider, addresses[0], [tokenA.address, tokenB.address], {\n        contractAddress: contract.address\n      });\n      expect(Object.keys(balances)).toHaveLength(2);\n      expect(Object.keys(balances)[0]).toBe(tokenA.address);\n      expect(Object.keys(balances)[1]).toBe(tokenB.address);\n      expect(balances[tokenA.address]).toBe(1000n);\n      expect(balances[tokenB.address]).toBe(1n);\n    });\n\n    it('does not throw for invalid contracts', async () => {\n      const { contract, signers, addresses } = await loadFixture(fixture);\n      const tokenA = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n      const tokenB = (await deployMockContract(signers[0], ERC20Artifact.abi)) as MockContract;\n\n      await expect(() =>\n        getTokensBalance(ethers.provider, addresses[0], [tokenA.address, tokenB.address], {\n          contractAddress: contract.address\n        })\n      ).not.toThrow();\n    });\n  });\n});\n"],"file":"eth-scan.test.js"}