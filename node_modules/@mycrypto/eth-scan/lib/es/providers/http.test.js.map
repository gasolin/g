{"version":3,"sources":["../../../src/providers/http.test.ts"],"names":["ethers","waffle","ETHER_BALANCES_ID","ETHER_BALANCES_TYPE","TOKEN_BALANCES_ID","TOKEN_BALANCES_TYPE","fixture","decode","encodeWithId","callWithHttp","isHttpProvider","jest","mock","loadFixture","describe","it","expect","toBe","url","contract","addresses","data","response","provider","connection","address","decoded","i","length","balance","BigInt","getBalance","toHexString","token","balanceOf","returns"],"mappings":"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","sourcesContent":["import { ethers, waffle } from '@nomiclabs/buidler';\nimport { ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, TOKEN_BALANCES_ID, TOKEN_BALANCES_TYPE } from '../constants';\nimport { fixture } from '../eth-scan.test';\nimport { decode, encodeWithId } from '../utils';\nimport { callWithHttp, isHttpProvider } from './http';\n\njest.mock('isomorphic-unfetch');\n\nconst { loadFixture } = waffle;\n\ndescribe('isHttpProvider', () => {\n  it('checks if a provider is an HTTP provider', () => {\n    expect(isHttpProvider('https://foo')).toBe(true);\n    expect(\n      isHttpProvider({\n        url: 'https://foo'\n      })\n    ).toBe(true);\n    expect(isHttpProvider({})).toBe(false);\n  });\n});\n\ndescribe('callWithHttp', () => {\n  it('gets the Ether balances from the contract', async () => {\n    const { contract, addresses } = await loadFixture(fixture);\n\n    const data = encodeWithId(ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, addresses);\n    const response = await callWithHttp(ethers.provider.connection.url, contract.address, data);\n\n    const decoded = decode<[Array<bigint>]>(['uint256[]'], response)[0];\n\n    for (let i = 0; i < addresses.length; i++) {\n      const balance = BigInt((await ethers.provider.getBalance(addresses[i])).toHexString());\n      expect(balance).toBe(decoded[i]);\n    }\n  });\n\n  it('gets the token balances from the contract', async () => {\n    const { contract, addresses, token } = await loadFixture(fixture);\n    await token.mock.balanceOf.returns('1000');\n\n    const data = encodeWithId(TOKEN_BALANCES_ID, TOKEN_BALANCES_TYPE, addresses, token.address);\n    const response = await callWithHttp(ethers.provider.connection.url, contract.address, data);\n\n    const decoded = decode<[Array<bigint>]>(['uint256[]'], response)[0];\n\n    for (let i = 0; i < addresses.length; i++) {\n      expect(decoded[i]).toBe(1000n);\n    }\n  });\n});\n"],"file":"http.test.js"}