{"version":3,"sources":["../../../src/providers/web3.ts"],"names":["stringToBuffer","getPayload","isWeb3Provider","provider","currentProvider","send","callWithWeb3","contractAddress","data","payload","response","result","error","Error","message","Promise","resolve","reject"],"mappings":"AAAA,OAASA,cAAT,KAA+B,UAA/B,CACA,OAASC,UAAT,KAA0D,QAA1D,CAQA;;;;;GAMA,MAAO,MAAMC,CAAAA,cAAc,CAAIC,CAAD,EAAqD,OACjF,MAAO,QAACA,CAAD,WAACA,CAAD,YAACA,CAAD,CAAgCC,eAAhC,uBAAiDC,IAAjD,UACR,CAFM,CAIP;;;;;;;GAQA,MAAO,MAAMC,CAAAA,YAAY,CAAG,MAC1BH,CAD0B,CAE1BI,CAF0B,CAG1BC,CAH0B,GAIN,CACpB,KAAMC,CAAAA,CAAO,CAAGR,UAAU,CAACM,CAAD,CAAkBC,CAAlB,CAA1B,CAEA,GAAI,CACF,KAAME,CAAAA,CAAQ,CAAG,KAAML,CAAAA,IAAI,CAASF,CAAT,CAAmBM,CAAnB,CAA3B,CAEA,MAAOT,CAAAA,cAAc,CAACU,CAAQ,CAACC,MAAV,CACtB,CAAC,MAAOC,CAAP,CAAc,CACd,KAAM,IAAIC,CAAAA,KAAJ,CAAW,yBAAwBD,CAAK,CAACE,OAAQ,EAAjD,CACP,CACF,CAdM,CAgBP,MAAO,MAAMT,CAAAA,IAAI,CAAG,CAAIF,CAAJ,CAAgCM,CAAhC,GACX,GAAIM,CAAAA,OAAJ,CAAY,CAACC,CAAD,CAAUC,CAAV,GAAqB,CACtCd,CAAQ,CAACC,eAAT,CAAyBC,IAAzB,CAAiCI,CAAjC,CAA0C,CAACG,CAAD,CAAQD,CAAR,GACpCC,CADoC,CAE/BK,CAAM,CAACL,CAAD,CAFyB,CAKnCD,CALmC,KASxCK,CAAAA,CAAO,CAACL,CAAD,CATiC,CAM/BM,CAAM,CAAC,GAAIJ,CAAAA,KAAJ,CAAU,qBAAV,CAAD,CANjB,CAWD,CAZM,CADF","sourcesContent":["import { stringToBuffer } from '../utils';\nimport { getPayload, JsonRpcPayload, JsonRpcResult } from './http';\n\nexport interface Web3ProviderLike {\n  currentProvider: {\n    send<T>(payload: JsonRpcPayload, callback: (error: Error | null, result?: JsonRpcResult<T>) => void): void;\n  };\n}\n\n/**\n * Check if an object is a valid Web3ProviderLike object.\n *\n * @param {any} provider\n * @return {boolean}\n */\nexport const isWeb3Provider = (provider: unknown): provider is Web3ProviderLike => {\n  return (provider as Web3ProviderLike)?.currentProvider?.send !== undefined;\n};\n\n/**\n * Call the contract with a Web3 provider. This throws an error if the call failed.\n *\n * @param {Web3ProviderLike} provider\n * @param {string} contractAddress\n * @param {string} data\n * @return {Promise<Buffer>}\n */\nexport const callWithWeb3 = async (\n  provider: Web3ProviderLike,\n  contractAddress: string,\n  data: string\n): Promise<Buffer> => {\n  const payload = getPayload(contractAddress, data);\n\n  try {\n    const response = await send<string>(provider, payload);\n\n    return stringToBuffer(response.result);\n  } catch (error) {\n    throw new Error(`Contract call failed: ${error.message}`);\n  }\n};\n\nexport const send = <T>(provider: Web3ProviderLike, payload: JsonRpcPayload): Promise<JsonRpcResult<T>> => {\n  return new Promise((resolve, reject) => {\n    provider.currentProvider.send<T>(payload, (error, result) => {\n      if (error) {\n        return reject(error);\n      }\n\n      if (!result) {\n        return reject(new Error('No response payload'));\n      }\n\n      resolve(result);\n    });\n  });\n};\n"],"file":"web3.js"}