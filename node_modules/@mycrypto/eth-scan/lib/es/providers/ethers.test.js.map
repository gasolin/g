{"version":3,"sources":["../../../src/providers/ethers.test.ts"],"names":["ethers","waffle","ETHER_BALANCES_ID","ETHER_BALANCES_TYPE","TOKEN_BALANCES_ID","TOKEN_BALANCES_TYPE","fixture","decode","encodeWithId","callWithEthers","isEthersProvider","loadFixture","describe","it","expect","provider","toBe","contract","addresses","data","response","address","decoded","i","length","balance","BigInt","getBalance","toHexString","token","mock","balanceOf","returns"],"mappings":"AAAA,OAASA,MAAT,CAAiBC,MAAjB,KAA+B,oBAA/B,CACA,OAASC,iBAAT,CAA4BC,mBAA5B,CAAiDC,iBAAjD,CAAoEC,mBAApE,KAA+F,cAA/F,CACA,OAASC,OAAT,KAAwB,kBAAxB,CACA,OAASC,MAAT,CAAiBC,YAAjB,KAAqC,UAArC,CACA,OAASC,cAAT,CAAyBC,gBAAzB,KAAiD,UAAjD,CAEA,KAAM,CAAEC,WAAF,EAAkBV,MAAxB,CAEAW,QAAQ,CAAC,kBAAD,CAAqB,IAAM,CACjCC,EAAE,CAAC,+CAAD,CAAkD,IAAM,CACxDC,MAAM,CAACJ,gBAAgB,CAACV,MAAM,CAACe,QAAR,CAAjB,CAAN,CAA0CC,IAA1C,IADwD,CAExDF,MAAM,CAACJ,gBAAgB,CAAC,EAAD,CAAjB,CAAN,CAA6BM,IAA7B,IACD,CAHC,CAIH,CALO,C,CAORJ,QAAQ,CAAC,gBAAD,CAAmB,IAAM,CAC/BC,EAAE,CAAC,2CAAD,CAA8C,SAAY,MACpD,CAAEI,QAAQ,CAARA,CAAF,CAAYC,SAAS,CAATA,CAAZ,EAA0B,KAAMP,CAAAA,WAAW,CAACL,OAAD,CADS,CAGpDa,CAAI,CAAGX,YAAY,CAACN,iBAAD,CAAoBC,mBAApB,CAAyCe,CAAzC,CAHiC,CAIpDE,CAAQ,CAAG,KAAMX,CAAAA,cAAc,CAACT,MAAM,CAACe,QAAR,CAAkBE,CAAQ,CAACI,OAA3B,CAAoCF,CAApC,CAJqB,CAMpDG,CAAO,CAAGf,MAAM,CAAkB,CAAC,WAAD,CAAlB,CAAiCa,CAAjC,CAAN,CAAiD,CAAjD,CAN0C,CAQ1D,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,CAAS,CAACM,MAA9B,CAAsCD,CAAC,EAAvC,CAA2C,CACzC,KAAME,CAAAA,CAAO,CAAGC,MAAM,CAAC,CAAC,KAAM1B,CAAAA,MAAM,CAACe,QAAP,CAAgBY,UAAhB,CAA2BT,CAAS,CAACK,CAAD,CAApC,CAAP,EAAiDK,WAAjD,EAAD,CAAtB,CACAd,MAAM,CAACW,CAAD,CAAN,CAAgBT,IAAhB,CAAqBM,CAAO,CAACC,CAAD,CAA5B,CACD,CACF,CAZC,CAD6B,CAe/BV,EAAE,CAAC,2CAAD,CAA8C,SAAY,CAC1D,KAAM,CAAEI,QAAQ,CAARA,CAAF,CAAYC,SAAS,CAATA,CAAZ,CAAuBW,KAAK,CAALA,CAAvB,EAAiC,KAAMlB,CAAAA,WAAW,CAACL,OAAD,CAAxD,CACA,KAAMuB,CAAAA,CAAK,CAACC,IAAN,CAAWC,SAAX,CAAqBC,OAArB,CAA6B,MAA7B,CAFoD,MAIpDb,CAAAA,CAAI,CAAGX,YAAY,CAACJ,iBAAD,CAAoBC,mBAApB,CAAyCa,CAAzC,CAAoDW,CAAK,CAACR,OAA1D,CAJiC,CAKpDD,CAAQ,CAAG,KAAMX,CAAAA,cAAc,CAACT,MAAM,CAACe,QAAR,CAAkBE,CAAQ,CAACI,OAA3B,CAAoCF,CAApC,CALqB,CAOpDG,CAAO,CAAGf,MAAM,CAAkB,CAAC,WAAD,CAAlB,CAAiCa,CAAjC,CAAN,CAAiD,CAAjD,CAP0C,CAS1D,IAAK,GAAIG,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGL,CAAS,CAACM,MAA9B,CAAsCD,CAAC,EAAvC,CACET,MAAM,CAACQ,CAAO,CAACC,CAAD,CAAR,CAAN,CAAmBP,IAAnB,CAAwB,KAAxB,CAEH,CAZC,CAaH,CA5BO,C","sourcesContent":["import { ethers, waffle } from '@nomiclabs/buidler';\nimport { ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, TOKEN_BALANCES_ID, TOKEN_BALANCES_TYPE } from '../constants';\nimport { fixture } from '../eth-scan.test';\nimport { decode, encodeWithId } from '../utils';\nimport { callWithEthers, isEthersProvider } from './ethers';\n\nconst { loadFixture } = waffle;\n\ndescribe('isEthersProvider', () => {\n  it('checks if a provider is an Ethers.js provider', () => {\n    expect(isEthersProvider(ethers.provider)).toBe(true);\n    expect(isEthersProvider({})).toBe(false);\n  });\n});\n\ndescribe('callWithEthers', () => {\n  it('gets the Ether balances from the contract', async () => {\n    const { contract, addresses } = await loadFixture(fixture);\n\n    const data = encodeWithId(ETHER_BALANCES_ID, ETHER_BALANCES_TYPE, addresses);\n    const response = await callWithEthers(ethers.provider, contract.address, data);\n\n    const decoded = decode<[Array<bigint>]>(['uint256[]'], response)[0];\n\n    for (let i = 0; i < addresses.length; i++) {\n      const balance = BigInt((await ethers.provider.getBalance(addresses[i])).toHexString());\n      expect(balance).toBe(decoded[i]);\n    }\n  });\n\n  it('gets the token balances from the contract', async () => {\n    const { contract, addresses, token } = await loadFixture(fixture);\n    await token.mock.balanceOf.returns('1000');\n\n    const data = encodeWithId(TOKEN_BALANCES_ID, TOKEN_BALANCES_TYPE, addresses, token.address);\n    const response = await callWithEthers(ethers.provider, contract.address, data);\n\n    const decoded = decode<[Array<bigint>]>(['uint256[]'], response)[0];\n\n    for (let i = 0; i < addresses.length; i++) {\n      expect(decoded[i]).toBe(1000n);\n    }\n  });\n});\n"],"file":"ethers.test.js"}