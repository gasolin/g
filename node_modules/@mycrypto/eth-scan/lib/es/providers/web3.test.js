import{ethers,waffle}from"@nomiclabs/buidler";import Web3 from"web3";import{ETHER_BALANCES_ID,ETHER_BALANCES_TYPE,TOKEN_BALANCES_ID,TOKEN_BALANCES_TYPE}from"../constants";import{fixture}from"../eth-scan.test";import{decode,encodeWithId}from"../utils";import{callWithWeb3,isWeb3Provider}from"./web3";jest.mock("web3");const{loadFixture}=waffle;describe("isWeb3Provider",()=>{it("checks if a provider is an HTTP provider",()=>{expect(isWeb3Provider({currentProvider:{send(){/* noop */}}})).toBe(!0),expect(isWeb3Provider({})).toBe(!1)})}),describe("callWithWeb3",()=>{const a=new Web3(ethers.provider.connection.url);it("gets the Ether balances from the contract",async()=>{const{contract:b,addresses:c}=await loadFixture(fixture),d=encodeWithId(ETHER_BALANCES_ID,ETHER_BALANCES_TYPE,c),e=await callWithWeb3(a,b.address,d),f=decode(["uint256[]"],e)[0];for(let a=0;a<c.length;a++){const b=BigInt((await ethers.provider.getBalance(c[a])).toHexString());expect(b).toBe(f[a])}}),it("gets the token balances from the contract",async()=>{const{contract:b,addresses:c,token:d}=await loadFixture(fixture);await d.mock.balanceOf.returns("1000");const e=encodeWithId(TOKEN_BALANCES_ID,TOKEN_BALANCES_TYPE,c,d.address),f=await callWithWeb3(a,b.address,e),g=decode(["uint256[]"],f)[0];for(let a=0;a<c.length;a++)expect(g[a]).toBe(1000n)})});
//# sourceMappingURL=web3.test.js.map