{"version":3,"sources":["../../../src/providers/http.ts"],"names":["fetch","stringToBuffer","isHttpProvider","provider","url","callWithHttp","contractAddress","data","options","params","payload","getPayload","body","method","headers","Accept","JSON","stringify","cache","response","json","error","Error","message","result","to","jsonrpc","id"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,oBAAlB,CACA,OAASC,cAAT,KAA+B,UAA/B,CA2BA;;;;;GAMA,MAAO,MAAMC,CAAAA,cAAc,CAAIC,CAAD,EAEN,QAApB,QAAOA,CAAAA,CAAP,EACqB,QAApB,QAAOA,CAAAA,CAAP,EAAgC,SAACA,CAAD,CAAsCC,GAHpE,CAOP;;;;;;;GAQA,MAAO,MAAMC,CAAAA,YAAY,CAAG,MAC1BF,CAD0B,CAE1BG,CAF0B,CAG1BC,CAH0B,GAIN,MACdH,CAAAA,CAAG,CAAuB,QAApB,QAAOD,CAAAA,CAAP,CAA+BA,CAA/B,CAA0CA,CAAQ,CAACC,GAD3C,CAEdI,CAAO,CAAuB,QAApB,QAAOL,CAAAA,CAAP,CAA+BA,CAAQ,CAACM,MAAxC,CAAiD,EAF7C,CAIdC,CAAO,CAAGC,UAAU,CAACL,CAAD,CAAkBC,CAAlB,CAJN,CAMdK,CAAI,CAAG,KAAMZ,CAAAA,KAAK,CAACI,CAAD,CAAM,CAC5BS,MAAM,CAAE,MADoB,CAE5BC,OAAO,CAAE,CACPC,MAAM,CAAE,kBADD,CAEP,eAAgB,kBAFT,CAFmB,CAM5BH,IAAI,CAAEI,IAAI,CAACC,SAAL,CAAeP,CAAf,CANsB,CAO5BQ,KAAK,CAAE,UAPqB,CAQ5B,GAAGV,CARyB,CAAN,CANJ,CAiBdW,CAA+B,CAAG,KAAMP,CAAAA,CAAI,CAACQ,IAAL,EAjB1B,CAmBpB,GAAID,CAAQ,CAACE,KAAb,CACE,KAAM,IAAIC,CAAAA,KAAJ,CAAW,yBAAwBH,CAAQ,CAACE,KAAT,CAAeE,OAAQ,EAA1D,CAAN,CAGF,MAAOtB,CAAAA,cAAc,CAACkB,CAAQ,CAACK,MAAV,CACtB,CA5BM,CA8BP;;;;;GAMA,MAAO,MAAMb,CAAAA,UAAU,CAAG,CAAOc,CAAP,CAAmBlB,CAAnB,IACjB,CACLmB,OAAO,CAAE,KADJ,CAELb,MAAM,CAAE,UAFH,CAGLJ,MAAM,CAAE,CACN,CACEgB,EAAE,CAAFA,CADF,CAEElB,IAAI,CAAJA,CAFF,CADM,CAKN,QALM,CAHH,CAULoB,EAAE,CAAE,CAVC,CADiB,CAAnB","sourcesContent":["import fetch from 'isomorphic-unfetch';\nimport { stringToBuffer } from '../utils';\n\ninterface HttpProviderWithOptions {\n  url: string;\n  params?: Partial<Omit<RequestInit, 'body' | 'method'>>;\n}\n\nexport type HttpProviderLike = string | HttpProviderWithOptions;\n\nexport interface JsonRpcPayload {\n  jsonrpc: string;\n  method: string;\n  params: unknown[];\n  id?: string | number;\n}\n\nexport interface JsonRpcResult<T> {\n  id: number;\n  jsonrpc: string;\n  result: T;\n  error?: {\n    code: number;\n    message: string;\n    data: string;\n  };\n}\n\n/**\n * Check if an object is a valid HttpProviderLike object.\n *\n * @param {any} provider\n * @return {boolean}\n */\nexport const isHttpProvider = (provider: unknown): provider is HttpProviderLike => {\n  return (\n    typeof provider === 'string' ||\n    (typeof provider === 'object' && (provider as HttpProviderWithOptions).url !== undefined)\n  );\n};\n\n/**\n * Call the contract with the HTTP provider. This throws an error if the call failed.\n *\n * @param {HttpProviderLike} provider\n * @param {string} contractAddress\n * @param {string} data\n * @return {Promise<Buffer>}\n */\nexport const callWithHttp = async (\n  provider: HttpProviderLike,\n  contractAddress: string,\n  data: string\n): Promise<Buffer> => {\n  const url = typeof provider === 'string' ? provider : provider.url;\n  const options = typeof provider === 'object' ? provider.params : {};\n\n  const payload = getPayload(contractAddress, data);\n\n  const body = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(payload),\n    cache: 'no-cache',\n    ...options\n  });\n\n  const response: JsonRpcResult<string> = await body.json();\n\n  if (response.error) {\n    throw new Error(`Contract call failed: ${response.error.message}`);\n  }\n\n  return stringToBuffer(response.result);\n};\n\n/**\n * Get the JSON-RPC payload for the `eth_call` function.\n *\n * @param {string} to The address to send the call to, as a hexadecimal string.\n * @param {string} data The data to send to the address, as a hexadecimal string.\n */\nexport const getPayload = <Data>(to: string, data: Data): JsonRpcPayload => {\n  return {\n    jsonrpc: '2.0',\n    method: 'eth_call',\n    params: [\n      {\n        to,\n        data\n      },\n      'latest'\n    ],\n    id: 1\n  };\n};\n"],"file":"http.js"}